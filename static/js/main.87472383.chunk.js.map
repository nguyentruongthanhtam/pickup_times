{"version":3,"sources":["db/pickup_times.csv","db/locations.csv","Fields.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","time_slots","i","from","toString","to","push","Fields","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onCalculate","date_time","date","state","chosen_date","time","chosen_time","_this2","dates_array","react_default","a","createElement","className","title","onChange","e","setState","target","value","map","index","key","placeholder","onClick","Component","Map","ReactMapboxGl","accessToken","process","symbolPaint","text-color","symbolLayout","text-field","text-font","text-offset","text-anchor","Mapbox","source","array","sum","reduce","acc","current","Number","Math","round","length","type","features","locations","restaurant","properties","location_id","place","pickup_time","getAverageValue","geometry","coordinates","longitude","latitude","style","containerStyle","position","height","width","center","lib_esm","data","App","onLocationsLoaded","result","onPickupTimeLoaded","l","iso_8601_timestamp","includes","substring","sort","dates","onDateTimeChosen","choice","pickup_data","pickup_times_array","objectSpread","d","hours","CSV_pickup_times","require","CSV_locations","PapaParse","parse","header","download","skipEmptyLines","complete","Fields_Fields","Map_Mapbox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87472383.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pickup_times.3f8db2e2.csv\";","module.exports = __webpack_public_path__ + \"static/media/locations.f4d97783.csv\";","import React, { Component } from 'react';\r\n\r\n// Create time slots array for time select field\r\nlet time_slots = [];\r\nfor(let i=0 ; i<24; i++)\r\n{\r\n  const from = i.toString()\r\n  let to = (i+1).toString()\r\n  if (i === 23)\r\n  {\r\n    to = '00'\r\n  }\r\n  time_slots.push(from +'-'+ to);\r\n}\r\n\r\nexport default class Fields extends Component {\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.state = {\r\n      time_slots : time_slots,\r\n      chosen_time: '',\r\n      chosen_date: ''\r\n    }\r\n  }\r\n  \r\n  // Send choices to parent component when button clicked\r\n  onCalculate = () => {\r\n    this.props.date_time({\r\n      date: this.state.chosen_date,\r\n      time: this.state.chosen_time\r\n    })\r\n  }\r\n  render()\r\n  {\r\n    let time_slots = this.state.time_slots;\r\n    // array of dates was passed from parent component\r\n    let dates_array = this.props.dates_array;\r\n    return (\r\n      <div className=\"fields\">\r\n        <div>\r\n          {/* Select Time field */}\r\n          <div>Time</div>\r\n          <select title=\"Time\" \r\n                  onChange={(e)=>this.setState({chosen_time: e.target.value })}     \r\n          >\r\n            {/* Default value */}\r\n            <option>-</option>\r\n            {\r\n              // Map time slots to select field\r\n              time_slots ? time_slots.map( (time,index) =>\r\n                <option value={index}\r\n                        key={index}\r\n                > {time} </option>\r\n              ) : 'Loading..'\r\n            }\r\n          </select>\r\n        </div>\r\n        {/* Select Date field */}\r\n        <div>\r\n          <div> Date </div>\r\n          <select title=\"Date\" \r\n                  onChange={(e)=>this.setState({chosen_date: e.target.value })}\r\n                  placeholder=\"date\"\r\n          >\r\n            {/* Default value */}\r\n            <option>-</option>\r\n            {\r\n              // Map dates from props to select field\r\n              dates_array ? dates_array.map( (date,index) =>\r\n                <option value={date}\r\n                        key={index}\r\n                > {date} </option>\r\n              ) : 'loading..'\r\n            }\r\n          </select>\r\n        </div>\r\n        {/* Calculate Button */}\r\n        <button onClick={()=>this.onCalculate()}>Calculate</button>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport ReactMapboxGl, { GeoJSONLayer } from \"react-mapbox-gl\";\r\nimport MapboxGL from 'mapbox-gl';\r\n// Add your MAPBOX API KEY in order to get the map to work\r\nconst KEY = process.env.REACT_APP_MAP_KEY;\r\n\r\nconst Map = ReactMapboxGl({\r\n  accessToken: KEY\r\n});\r\n\r\n// symbol layout and style of values on the Map\r\nconst symbolPaint: MapboxGL.SymbolPaint = {\r\n  'text-color': 'rgb(183, 255, 16)'\r\n};\r\nconst symbolLayout: MapboxGL.SymbolLayout = \r\n{\r\n  \"text-field\": \"{place}\",\r\n  \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\r\n  \"text-offset\": [0, 0.6],\r\n  \"text-anchor\": \"top\"\r\n}\r\n\r\nexport default class Mapbox extends Component {\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.state = {\r\n      source: ''\r\n    }\r\n  }\r\n  // Get Median Pickup Time from pickup_time array in props\r\n  getAverageValue(array)\r\n  {\r\n    // Get the sum of pickup_time array\r\n    const sum = array.reduce((acc,current)=>{\r\n      return Number(acc) + Number(current)\r\n    }, 0)\r\n    return Math.round(sum / array.length); // Round number to integer\r\n  }\r\n\r\n  // Map props to geoJson format then feed to Map\r\n  componentWillReceiveProps(props)\r\n  {\r\n    // Map pickup_time values to points follow\r\n    // geojson standard of every point data.\r\n    const mapped_source = props.locations.map(restaurant => {\r\n      return {\r\n        \"type\": \"Feature\",\r\n        \"properties\": {\r\n          \"title\": restaurant.location_id,\r\n          \"place\": (restaurant.pickup_time && restaurant.pickup_time.length !== 0) ? this.getAverageValue(restaurant.pickup_time) : ''\r\n        },\r\n        \"geometry\": {\r\n          \"coordinates\": [\r\n            Number(restaurant.longitude),\r\n            Number(restaurant.latitude)\r\n          ],\r\n          \"type\": \"Point\"\r\n        }\r\n      }\r\n    })\r\n\r\n    // Create source object with geojson format then add mapped points array above.\r\n    let source = {}\r\n    source = {\r\n      type: 'FeatureCollection',\r\n      features: mapped_source\r\n    }\r\n    this.setState({source: source})\r\n  }\r\n  \r\n  render()\r\n  {\r\n    const source = this.state.source\r\n    // render map when source is not empty\r\n    if(source) \r\n    {\r\n      return (\r\n      <Map\r\n        style=\"mapbox://styles/mapbox/dark-v9\"\r\n        containerStyle={{\r\n          position: 'absolute',\r\n          height: \"100vh\",\r\n          width: \"100vw\"\r\n        }}\r\n        // center point is the 1st location. I manually added.\r\n        center={[24.941583, 60.17087]}\r\n      >\r\n        {/* Show points on Map */}\r\n        <GeoJSONLayer\r\n          data={source}\r\n          symbolPaint={symbolPaint}\r\n          symbolLayout={symbolLayout}\r\n          />\r\n      </Map>\r\n      )\r\n    }\r\n    // When map's source is empty\r\n    else\r\n     return <div>Map is Loading....</div>\r\n  }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Fields from './Fields';\nimport Mapbox from './Map';\n// CSV Parsing Library\nimport PapaParse from 'papaparse';\n\nclass App extends Component {\n  constructor(props)\n  {\n    super(props)\n    this.state = {\n      result: [],\n      dates: [],\n      locations: []\n    }\n  }\n\n  // When locations data parsing completed\n  onLocationsLoaded = (result) => \n  {\n    this.setState({\n      locations: result.data,\n    })\n  }\n\n  // When pickup_times data parsing completed\n  onPickupTimeLoaded = (result) => \n  {\n    // result holds data from CSV file\n    // Get distinct dates from result \n    const a = result.data;\n    const l = a.length;\n    const dates_array =[];\n    for(let i=0 ; i<l-1; i++)\n    {\n      let date = a[i].iso_8601_timestamp;\n      // if dates_array not contain this date => insert it to dates_array\n      if(!dates_array.includes(date.substring(0,10)))\n      {\n        dates_array.push(date.substring(0,10))\n      }\n    }\n    // sort dates array\n    dates_array.sort()\n    // update dates object then feed to input fields\n    this.setState({\n      result: result.data,\n      dates: dates_array\n    })\n  }\n\n  // Get Date and Time from user's input\n  onDateTimeChosen = (choice) => \n  {\n    // get pickup and location data\n    const pickup_data = this.state.result;\n    const locations_data = this.state.locations;\n\n    // Add pickup_time array to locations data so can feed to the map later\n    let pickup_times_array = locations_data.map(l=>{\n      return {\n        ...l,\n        pickup_time: []\n      }\n    })\n\n    // Get pickup times from csv parsed data \n    for(let i=0 ; i<pickup_data.length-1 ; i++)\n    {\n      // Split timestamp field into date and hours\n      let d = pickup_data[i].iso_8601_timestamp;\n      const date = d.substring(0,10)\n      const hours = d.substring(11,13)\n\n      // location_id and pickup_time fields\n      const location_id = pickup_data[i].location_id\n      const pickup_time = pickup_data[i].pickup_time\n      \n      // If date and hours matched then add to pickup_times array\n      if(date === choice.date && hours === choice.time)\n      {\n        pickup_times_array[location_id-1].pickup_time.push(pickup_time);\n      }\n    }    \n\n    // Update the locations data after added pickup_times array\n    this.setState({locations: pickup_times_array})\n  }\n\n  // Load CSV data when the App start\n  componentDidMount()\n  {\n    // CVS files import\n    const CSV_pickup_times = require('./db/pickup_times.csv')\n    const CSV_locations = require('./db/locations.csv')\n    // Using PapaParse library to parse csv data \n    // then save it to result object\n\n    // Pickup_time CSV\n    const pickup_data = PapaParse.parse(CSV_pickup_times,\n    {\n      header: true,\n      download: true,\n      skipEmptyLines: true,\n      complete: this.onPickupTimeLoaded,\n    })\n    // Locations CSV\n    const locations_data = PapaParse.parse(CSV_locations,\n    {\n      header: true,\n      download: true,\n      complete: this.onLocationsLoaded,\n      skipEmptyLines: true\n    })\n  }\n  \n  render() {\n    let result = this.state.result\n    let dates_array = this.state.dates\n    let locations = this.state.locations\n    return (\n      <div className=\"App\">\n\n        {/* Get user's input Component */}\n        <Fields \n          date_time={this.onDateTimeChosen}\n          dates_array = {dates_array}\n        ></Fields>\n\n        {/* Map Component */}\n        <Mapbox locations={locations}></Mapbox>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}